# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;
    include /usr/local/etc/nginx/sites-enabled/*;    

    index   index.html index.htm;
    
    upstream myapp1{
	least_conn;
#	server 127.0.0.1:8000;
#	server 127.0.0.1:8001;
#	server 127.0.0.1:8002;
#	server 127.0.0.1:8003;
	server unix:/tmp/gunicorn.sock;
	server unix:/tmp/gunicorn2.sock;
	server unix:/tmp/gunicorn3.sock;
}
	
 #   server {
#	listen 8002 default_server;
#	listen [::]:8002 default_server;
#	server_name localhost;
#	root /usr/share/nginx/html;
#	if ($http_x_forwarded_proto =  'http'){
#		return 301 https://$host$request_uri;	
  #  }
 #	if ($http_x_forwarded_proto !=  'https'){
#		return 301 https://$host$request_uri;	
 #   }  	
#}    

 #   server {
#	listen 8001 default_server;
#	listen [::]:8001 default_server;
#	server_name localhost;
#	root /usr/share/nginx/html;
#	if ($http_x_forwarded_proto =  'http'){
#		return 301 https://$host$request_uri;	
#	}
 #	if ($http_x_forwarded_proto !=  'https'){
#		return 301 https://$host$request_uri;	
  #  }  	
  #  }
		
    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  localhost;
        root         /usr/share/nginx/html;
#	if ($http_x_forwarded_proto = 'http'){
	return 301 https://$host$request_uri;	
#	}
 #	if ($http_x_forwarded_proto !=  'https'){
#		return 301 https://$host$request_uri;	
   # }  	

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
}


        

        # redirect server error pages to the static page /40x.html
        #
        error_page 404 /404.html;
            location = /40x.html {
        }

        # redirect server error pages to the static page /50x.html
        #
        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

# Settings for a TLS enabled server.
#
    server {
        listen       443 ssl http2 default_server;
        listen       [::]:443 ssl http2 default_server;
        server_name  localhost;
        root         /usr/share/nginx/html;
#
        ssl_certificate "/etc/letsencrypt/live/iloveesm.ml/fullchain.pem";
        ssl_certificate_key "/etc/letsencrypt/live/iloveesm.ml/privkey.pem";
        # It is *strongly* recommended to generate unique DH parameters
        # Generate them with: openssl dhparam -out /etc/pki/nginx/dhparams.pem 2048
        ssl_dhparam "/etc/ssl/certs/dhparam.pem";
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  10m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
       
	ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;
        ssl_prefer_server_ciphers on;
	

       
	# Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
		proxy_redirect     off;
                proxy_pass         http://myapp1;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_read_timeout 86400;
                proxy_set_header Host $http_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_set_header Accept-Encoding "";
                add_header X-Content-Type-Options nosniff;
                add_header X-XSS-Protection "1; mode=block";
		add_header Strict-Transport-Security "max-age=31536000" always;
		add_header Content-Security-Policy "default-src 'none';script-src 'self'; frame-src 'self' *.google.com; style-src 'unsafe-inline'; frame-ancestors 'self'";
		add_header X-Frame-Options SAMEORIGIN;	
	}	
#
        error_page 404 /404.html;
            location = /40x.html {
        }
#
        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

}

